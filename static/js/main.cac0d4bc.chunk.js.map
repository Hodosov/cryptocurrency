{"version":3,"sources":["redux/CoinsReducer.js","components/CoinsCard.js","App.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["initialState","coins","Cards","styled","div","props","color","Icon","img","Coin","axios","then","responsce","getCoins","data","this","map","el","key","di","src","iconUrl","name","React","Component","CoinsCard","connect","state","dispatch","type","getCoinsAC","App","Boolean","window","location","hostname","match","Reducer","combineReducers","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0QAEIA,EAAe,CACfC,MAAO,I,4UCGX,IAAMC,EAAQC,IAAOC,IAAV,KACa,SAAAC,GAAK,MAAoB,YAAhBA,EAAMC,MAAsB,OAASD,EAAMC,SAC/D,SAAAD,GAAK,MAAoB,SAAhBA,EAAMC,MAAmB,OAAS,UAQlDC,EAAOJ,IAAOK,IAAV,KAIJC,E,kLAEmB,IAAD,OAChBC,MAAU,+CACLC,MAAK,SAAAC,GAAS,OAAI,EAAKP,MAAMQ,SAASD,EAAUE,KAAKA,KAAKb,Y,+BAI/D,OAAO,6BACFc,KAAKV,MAAMJ,MAAMe,KAAI,SAAAC,GAAE,OAAI,kBAACf,EAAD,CACxBI,MAAOW,EAAGX,MACVY,IAAKD,EAAGE,IACJ,kBAACZ,EAAD,CAAMa,IAAKH,EAAGI,UACjBJ,EAAGK,c,GAbDC,IAAMC,WAiCdC,EAAYC,aAdD,SAACC,GACnB,MAAO,CACH1B,MAAO0B,EAAM1B,MAAMA,UAIF,SAAC2B,GACtB,MAAO,CACHf,SAAU,SAACZ,GACP2B,ED/Bc,SAAC3B,GAAD,MAAY,CAAC4B,KAjBtB,WAiBsC5B,SC+BlC6B,CAAW7B,QAKTyB,CAA6CjB,GC1CrDsB,MARf,WACE,OACE,6BACE,kBAACN,EAAD,QCMcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfOC,EAAUC,YAAgB,CACnCrC,MJEwB,WAAkC,IAAjC0B,EAAgC,uDAAzB3B,EAAcuC,EAAW,uCACzD,OAAOA,EAAOV,MACV,IARS,WAST,OAAO,eACAF,EADP,CAEI1B,MAAM,GAAD,mBAAM0B,EAAM1B,OAAZ,YAAsBsC,EAAOtC,UAEpC,QAAS,OAAO0B,MKJtBa,EAAQC,YAAYJ,EACtBJ,OAAOS,8BAAgCT,OAAOS,gCAEhDC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cac0d4bc.chunk.js","sourcesContent":["const GETCOINS = 'GETCOLIS'\n\nlet initialState = {\n    coins: []\n}\n\nexport const coinsReducer = (state= initialState, action) => {\n    switch(action.type){\n        case(GETCOINS):\n        return ({\n            ...state,\n            coins: [...state.coins, ...action.coins]            \n        })\n          default: return state\n    }\n}\n\nexport const getCoinsAC = (coins) => ({type: GETCOINS, coins})","import React from 'react'\nimport * as axios from 'axios'\nimport { getCoinsAC } from '../redux/CoinsReducer'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nconst Cards = styled.div`\n    background-color: ${props => props.color === '#000000' ? '#fff' : props.color };\n    color: ${props => props.color === '#000' ? '#fff' : '#000'};\n    height: 100px;\n    margin: 5px;\n    border: solid 1px;\n    border-color: #000;\n    border-radius: 5px;\n`\n\nconst Icon = styled.img`\n    height: 50px;\n`\n\nclass Coin extends React.Component {\n\n    componentDidMount() {\n        axios.get('https://api.coinranking.com/v1/public/coins')\n            .then(responsce => this.props.getCoins(responsce.data.data.coins))\n    }\n\n    render() {\n        return <div>\n            {this.props.coins.map(el => <Cards\n                color={el.color}\n                key={el.di}>\n                    <Icon src={el.iconUrl} />\n                {el.name}\n            </Cards>)}\n        </div>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        coins: state.coins.coins\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        getCoins: (coins) => {\n            dispatch(getCoinsAC(coins))\n        }\n    }\n}\n\nexport let CoinsCard = connect(mapStateToProps, mapDispatchToProps)(Coin)","import React from 'react';\nimport { CoinsCard } from './components/CoinsCard';\n\nfunction App() {\n  return (\n    <div>\n      <CoinsCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { coinsReducer } from './CoinsReducer'\n\nexport const Reducer = combineReducers({\n    coins: coinsReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { Reducer } from './redux/reducer'\n\nlet store = createStore(Reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}