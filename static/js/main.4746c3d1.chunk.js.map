{"version":3,"sources":["redux/CoinsReducer.js","function/colorFunction.js","components/CoinCard/styles.js","components/CoinCard/Chart/index.js","components/CoinCard/index.js","components/CoinsCardContainer.js","redux/actions.js","redux/types.js","App.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["initialState","coins","loading","rgbToYIQ","r","g","b","hexToRgb","hex","undefined","result","exec","parseInt","Card","styled","div","props","color","colorHex","threshold","rgb","contrast","Icon","img","Chart","data","history","this","updateCanvas","ctx","refs","canvas","getContext","fillStyle","fillRect","i","length","d","lineTo","stroke","lineWidth","beginPath","moveTo","ref","width","height","React","Component","CoinCard","key","src","name","CoinCardContainer","getCoinsThunk","map","el","id","iconUrl","CoinsCards","connect","state","dispatch","axios","then","response","type","catch","error","App","Boolean","window","location","hostname","match","Reducer","combineReducers","action","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4746c3d1.chunk.js","sourcesContent":["import * as axios from 'axios'\nimport { GET_COINS_SUCCESS, GET_COINS_ERROR } from './types'\nimport { getCoinsAC, getCoinsErrorAC } from './actions'\n\nlet initialState = {\n    coins: [],\n    loading: false\n}\n\nexport const coinsReducer = (state= initialState, action) => {\n    switch(action.type){\n        case(GET_COINS_SUCCESS):\n        return ({\n            ...state,\n            coins: [...state.coins, ...action.coins],\n            loading: true            \n        })\n        break;\n        case(GET_COINS_ERROR):\n        return({\n            ...state,\n            loading: false\n\n        })\n        break;\n          default: return state\n    }\n}\n\nexport const getCoinsThunk = () => (dispatch) => {\n     return axios.get('https://api.coinranking.com/v1/public/coins')\n    .then(response => dispatch(getCoinsAC(response.data.data.coins)))\n    .catch(error => dispatch(getCoinsErrorAC(error)))\n    }\n        \n\n\n","function rgbToYIQ({r, g, b}) {\n    return ((r * 299) + (g * 587) + (b * 114)) / 1000;\n  }\n\n  function hexToRgb(hex) {\n    if (!hex || hex === undefined || hex === '') {\n      return undefined;\n    }\n\n    const result =\n          /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : undefined;\n  }\n\n  export let contrast = (colorHex, threshold = 128) => {\n    if(colorHex === null){\n        return '#000'\n    }\n\n    if (colorHex === undefined) {\n      return '#fff';\n    }\n    \n    const rgb = hexToRgb(colorHex);\n\n    if (rgb === undefined) {\n      return '#fff';\n    }\n\n    return rgbToYIQ(rgb) >= threshold ? '#000' : '#fff';\n  }","import styled from 'styled-components'\nimport { contrast } from '../../function/colorFunction'\n\nexport const Card = styled.div`\n    display: flex;\n    background-color: ${props => props.color};\n    color: ${props => contrast(props.color)};\n    height: 100px;\n    margin: 5px;\n    border: solid 1px;\n    border-color: #000;\n    border-radius: 5px;\n`\n\nexport const Icon = styled.img`\n    height: 50px;\n`","import React from 'react'\n\nexport class Chart extends React.Component {\n\n    data = this.props.history\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n    const ctx = this.refs.canvas.getContext('2d')\n    ctx.fillStyle = this.props.color\n    ctx.fillRect(0, 0, 1000, 100)\n\n    ctx.fillStyle = 'red'\n    for( let i = 0; i<this.data.length; i++){\n        let d = this.data[i]\n\n        ctx.lineTo(10 + i * 10, 100 - d * 50)\n        ctx.stroke()\n    }\n        ctx.fillStyle = '#666'\n        ctx.lineWidth = 2\n        ctx.beginPath()\n        ctx.moveTo(10, 10)\n        ctx.lineTo(10, 90)\n        ctx.lineTo(260, 90)\n        ctx.stroke()\n    \n    }\n\n    render() {\n    return (\n        <div>\n            <canvas ref='canvas' width={1000} height={100}></canvas>\n        </div>\n\n    )}\n}\n","import React from 'react'\nimport { Card, Icon } from './styles'\nimport { Chart } from './Chart'\n\nexport const CoinCard = (props) => {\n    return (\n        <Card\n                color={props.color}\n                key={props.key}>\n                <Icon src={props.src} />\n                {props.name}\n                <Chart history={props.history} \n                color={props.color}\n                />\n        </Card>\n    )\n}\n\n","import React from 'react'\nimport { getCoinsThunk } from '../redux/CoinsReducer'\nimport { connect } from 'react-redux'\nimport { CoinCard } from './CoinCard/index'\n\nclass CoinCardContainer extends React.Component {\n\n    componentDidMount() {\n        this.props.getCoinsThunk()\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.loading \n                ?  <div>\n                    {this.props.coins.map(el => <CoinCard\n                        color={el.color}\n                        key={el.id}\n                        src={el.iconUrl}\n                        name={el.name}\n                        history={el.history}\n                    />\n                    )}\n                </div>\n                : <h1>ERROR</h1>}\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        coins: state.coins.coins,\n        loading: state.coins.loading\n    }\n}\n\nexport let CoinsCards = connect(mapStateToProps, { getCoinsThunk })(CoinCardContainer)","import { GET_COINS_ERROR, GET_COINS_SUCCESS} from './types'\n\nexport const getCoinsAC = (coins) => ({type: GET_COINS_SUCCESS, coins})\nexport const getCoinsErrorAC = () => ({ type: GET_COINS_ERROR})","export const GET_COINS_SUCCESS = 'GET_COINS_SUCCESS'\nexport const GET_COINS_ERROR = 'GET_COINS_ERROR'","import React from 'react';\nimport { CoinsCards } from './components/CoinsCardContainer';\n\nfunction App() {\n  return (\n      <CoinsCards />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { coinsReducer } from './CoinsReducer'\n\nexport const Reducer = combineReducers({\n    coins: coinsReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Reducer } from './redux/reducer'\nimport thunk from 'redux-thunk'\n\nlet store = createStore(Reducer,\n  compose(\n    applyMiddleware(thunk),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}